- model_class = defined?(record) ? record.model : model_class
- form_object = defined?(record) ? record : instance_variable_get("@#{object}_form")
- input_params = { property: property, object: object, form_object: form_object, value: value }
- if !type.class.in?([ Symbol, String ]) && type[:input_options]
  - input_params.merge!(options: type[:input_options])
  - type = type[:type]
- if type.class.in?([ Symbol, String ]) || type&.dig(:input_options)
  - type = type.to_sym
  - if !type.in?([ :hidden ]) && input_params.dig(:options, :label) != false
    = form.label form_object.model.class.human_attribute_name property
  - case type
  - when :default
    = form.input property, **default_params(**input_params)
  - when :association
    = form.association property, **association_params(**input_params)
  - when :hidden_association
    - if form_object.public_send(property)&.id
      = form.association property, **association_params(**input_params).merge(as: :hidden, input_html: { value: form_object.public_send(property)&.id })
    - else 
      = form.association property, **association_params(**input_params).merge(as: :hidden)
  - when :polymorphic_association
    = form.input property, **polymorphic_association_params(**input_params.merge(value: value))
  - when :react_component
    = react_component "#{property.camelize}Input", value: value
  - else
    - options = input_params[:options] || {}
    = form.input property, **simple_params(**input_params.merge(type: type)).merge(options)
- else
  - property_value = form_object.model.values.present? && form_object.model.values[property.to_s]
  = render 'tramway/core/shared/input_extended', field: type[:extended_form_property], class_name: :record, value: property_value, f: form

- if params[:errors].present? && params[:errors][property]&.first
  .alert.alert-danger
    = params[:errors][property]&.first
